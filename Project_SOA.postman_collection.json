{
	"info": {
		"_postman_id": "db86c4ef-d5a3-42af-a9f4-68837cda857d",
		"name": "Project_SOA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Register API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Nama should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('nama')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Email should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('email')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Password should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('password')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Telepon should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('telepon')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Jenis Kelamin should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('jenis_kelamin')).to.equal(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Membuat User Baru\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama",
									"value": "Yongki Tanu",
									"description": "Nama pengguna API ini",
									"type": "text"
								},
								{
									"key": "email",
									"value": "yongki.tanu5@gmail.com",
									"description": "Email pengguna API ini",
									"type": "text"
								},
								{
									"key": "password",
									"value": "yongki5",
									"description": "Password pengguna API ini",
									"type": "text"
								},
								{
									"key": "telepon",
									"value": "085785440126",
									"description": "Nomor telepon pengguna API ini",
									"type": "text"
								},
								{
									"key": "jenis_kelamin",
									"value": "L",
									"description": "Jenis kelamin pengguna API ini",
									"type": "text"
								},
								{
									"key": "foto_user",
									"description": "Foto pengguna API ini",
									"type": "file",
									"src": "Screenshot (3).png"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"register"
							]
						},
						"description": "Endpoint untuk melakukan register user pengguna API ini"
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Login\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"if(responseJson.email == \"admin\"){\r",
									"    pm.test(\"Person is Admin\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    console.log(responseJson);\r",
									"        pm.expect(responseJson.email).to.eql(\"admin\");\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"}else{\r",
									"    pm.test(\"Person is Non-Admin\", () => {\r",
									"    const responseJson = pm.response.json();\r",
									"        pm.expect(responseJson).to.be.have.property(\"nama\");\r",
									"    });\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Email should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.urlencoded.has('email')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Password should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.urlencoded.has('password')).to.equal(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "yongki.tanu5@gmail.com",
									"description": "Email pengguna API ini",
									"type": "text"
								},
								{
									"key": "password",
									"value": "yongki5",
									"description": "Password pengguna API ini",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"login"
							]
						},
						"description": "Endpoint untuk melakukan login user pengguna API ini"
					},
					"response": []
				},
				{
					"name": "Lihat Profil User dengan JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat Profile\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"var count = Object.keys(responseJson).length;\r",
									"\r",
									"pm.test('Jumlah Response Benar', function () {\r",
									"    pm.expect(count).to.equal(9);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT pengguna API yang sedang login",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{base_url}}/users/profil",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"profil"
							]
						},
						"description": "Endpoint untuk melihat profil user"
					},
					"response": []
				},
				{
					"name": "Topup Saldo User dengan JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  console.log(newAccessToken);\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Top Up Saldo User\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.code == 200){\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    var count = Object.keys(responseJson).length;\r",
									"\r",
									"    pm.test('Jumlah Response Benar', function () {\r",
									"        pm.expect(count).to.equal(10);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT pengguna API yang sedang login",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "saldo",
									"value": "10000000",
									"description": "Jumlah saldo yang ingin ditambahkan",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/topup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"topup"
							]
						},
						"description": "Endpoint untuk melakukan top up saldo user"
					},
					"response": []
				},
				{
					"name": "Upgrade Status User dengan JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Tipe should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.urlencoded.has('tipe')).to.equal(true);\r",
									"});\r",
									"\r",
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  console.log(newAccessToken);\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									" pm.test(\"Berhasil Upgrade Status User Profile\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.code == 200){\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    var count = Object.keys(responseJson).length;\r",
									"\r",
									"    pm.test('Jumlah Response Benar', function () {\r",
									"        pm.expect(count).to.equal(10);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT pengguna API yang sedang login",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "tipe",
									"value": "1",
									"description": "Tipe status pengguna API ini (bertahap)\n1:  Free\n2: Advance\n3: Profesional",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/upgrade",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"upgrade"
							]
						},
						"description": "Endpoint untuk melakukan upgrade status user"
					},
					"response": []
				},
				{
					"name": "Recharge API Hit User dengan JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Api Hit should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.urlencoded.has('api_hit')).to.equal(true);\r",
									"});\r",
									"\r",
									"\r",
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  console.log(newAccessToken);\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Recharge API Hit Profile\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.code == 200){\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    var count = Object.keys(responseJson).length;\r",
									"\r",
									"    pm.test('Jumlah Response Benar', function () {\r",
									"        pm.expect(count).to.equal(8);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT pengguna API yang sedang login",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "api_hit",
									"value": "10",
									"description": "Jumlah API_hit yang ingin ditambahkan",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/recharge",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"recharge"
							]
						},
						"description": "Endpoint untuk menambah ulang kembali API hit user"
					},
					"response": []
				},
				{
					"name": "Komen Deskripsi Produk",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Id Produk should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.urlencoded.has('id_produk')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Isi Deskripsi should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.urlencoded.has('isi_deskripsi')).to.equal(true);\r",
									"});\r",
									"\r",
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  console.log(newAccessToken);\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Tambah Deskripsi Produk\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT pengguna API yang sedang login",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id_produk",
									"value": "PR_AC001",
									"description": "Id produk yang ingin diberi komentar",
									"type": "text"
								},
								{
									"key": "isi_deskripsi",
									"value": "Menarik dan berkualitas",
									"description": "Isi komentar tentang deskripsi produk",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/deskripsi",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"deskripsi"
							]
						},
						"description": "Endpoint untuk mengomentari deskripsi pada suatu produk tertentu"
					},
					"response": []
				},
				{
					"name": "Ganti Email User dengan JWT",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Email should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.urlencoded.has('email')).to.equal(true);\r",
									"});\r",
									"\r",
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"hakim.agus@sudiati.name\"},\r",
									"        {key: \"password\", value: \"456\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  console.log(newAccessToken);\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Ganti Email Baru User\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT pengguna API yang sedang login",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "gantiemail21@gmail.com",
									"description": "Email baru yang ingin didaftarkan",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/gantiEmail",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"gantiEmail"
							]
						},
						"description": "Endpoint untuk mengganti email user"
					},
					"response": []
				}
			],
			"description": "Ini adalah daftar endpoint yang berhubungan dengan user"
		},
		{
			"name": "Admin",
			"item": [
				{
					"name": "Tambah Produk",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Nama should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('nama')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Id Kategori should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('id_kategori')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Id Produsen should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('id_produsen')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Satuan should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('satuan')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Indikasi should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('indikasi')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Komposisi should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('komposisi')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Dosis should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('dosis')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Aturan pakai should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('aturan_pakai')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Kemasan should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('kemasan')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Harga should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('harga')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Butuh resep should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('butuh_resep')).to.equal(true);\r",
									"});\r",
									"\r",
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"admin\"},\r",
									"        {key: \"password\", value: \"admin\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Tambah Produk Baru\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"type": "text",
								"description": "JWT Admin"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "nama",
									"value": "Adem Sari",
									"description": "Nama produk baru",
									"type": "text"
								},
								{
									"key": "id_kategori",
									"value": "KA_OB001",
									"description": "Id kategori produk",
									"type": "text"
								},
								{
									"key": "id_produsen",
									"value": "PO_CV001",
									"description": "Id produsen produk",
									"type": "text"
								},
								{
									"key": "satuan",
									"value": "SA_KA002",
									"description": "Satuan produk",
									"type": "text"
								},
								{
									"key": "indikasi",
									"value": "Menyembuhkan flu",
									"description": "Indikasi produk baru",
									"type": "text"
								},
								{
									"key": "komposisi",
									"value": "Kaplet 250mg",
									"description": "Komposisi produk baru",
									"type": "text"
								},
								{
									"key": "dosis",
									"value": "3x Sehari",
									"description": "Dosis produk baru",
									"type": "text"
								},
								{
									"key": "aturan_pakai",
									"value": "Sebelum makan",
									"description": "Aturan pakai produk baru",
									"type": "text"
								},
								{
									"key": "kemasan",
									"value": "Kaplet",
									"description": "Kemasan produk baru",
									"type": "text"
								},
								{
									"key": "harga",
									"value": "15000",
									"description": "Harga produk baru",
									"type": "text"
								},
								{
									"key": "butuh_resep",
									"value": "0",
									"description": "Produk baru ini butuh resep atau tidak",
									"type": "text"
								},
								{
									"key": "keterangan",
									"value": "Aman bagi anak-anak",
									"description": "Keterangan produk baru",
									"type": "text"
								},
								{
									"key": "foto_produk",
									"description": "Foto produk baru",
									"type": "file",
									"src": "Screenshot (1).png"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/produk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk"
							]
						},
						"description": "Untuk menambah produk obat"
					},
					"response": []
				},
				{
					"name": "Update Produk",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Id Produk should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('id_produk')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Id Produsen should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('id_produsen')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Harga should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('harga')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Kemasan should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('kemasan')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Keterangan should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('keterangan')).to.equal(true);\r",
									"});\r",
									"\r",
									"pm.test('Foto Produk should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.formdata.has('foto_produk')).to.equal(true);\r",
									"});\r",
									"\r",
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"admin\"},\r",
									"        {key: \"password\", value: \"admin\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Ubah Data Produk\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"type": "text",
								"description": "JWT Admin"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "id_produk",
									"value": "PR_FF001",
									"description": "Id produk yang ingin diubah",
									"type": "text"
								},
								{
									"key": "id_produsen",
									"value": "PO_CV002",
									"description": "Id produsen ",
									"type": "text"
								},
								{
									"key": "harga",
									"value": "12500",
									"description": "Harga baru produk",
									"type": "text"
								},
								{
									"key": "kemasan",
									"value": "Strip Foil",
									"description": "Kemasan produk",
									"type": "text"
								},
								{
									"key": "keterangan",
									"value": "Aman bagi anak-anak umur 7-10 tahun",
									"description": "Keterangan baru produk",
									"type": "text"
								},
								{
									"key": "foto_produk",
									"description": "Foto baru produk",
									"type": "file",
									"src": "/C:/Users/User/Pictures/Screenshots/Screenshot (4).png"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/produk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk"
							]
						},
						"description": "Untuk mengubah data produk obat pada sistem"
					},
					"response": []
				},
				{
					"name": "Delete Produk",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Id Produk should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.urlencoded.has('id_produk')).to.equal(true);\r",
									"});\r",
									"\r",
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"admin\"},\r",
									"        {key: \"password\", value: \"admin\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Hapus Data Produk\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT Admin",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "id_produk",
									"value": "PR_AD001",
									"description": "Id produk yang ingin dihapus",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/produk",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk"
							]
						},
						"description": "Untuk menghapus data produk obat pada sistem."
					},
					"response": []
				},
				{
					"name": "Lihat 1 User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat Data User\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.code == 200){\r",
									"const responseJson = pm.response.json();\r",
									"    var count = Object.keys(responseJson.data).length;\r",
									"    pm.test('Jumlah Response Benar', function () {\r",
									"        pm.expect(count).to.equal(6);\r",
									"    });\r",
									"\r",
									"var count2 = responseJson.Message;\r",
									"\r",
									"pm.test('Message Benar', function () {\r",
									"    pm.expect(count2).to.equal(\"Berhasil ambil data user\");\r",
									"});\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"admin\"},\r",
									"        {key: \"password\", value: \"admin\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"type": "text",
								"description": "JWT Admin"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/PE_AM001",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"PE_AM001"
							]
						},
						"description": "Untuk melihat data diri dari user yang memiliki id tertentu"
					},
					"response": []
				},
				{
					"name": "Lihat Semua User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat Data Semua User\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"admin\"},\r",
									"        {key: \"password\", value: \"admin\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT Admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Untuk melihat data diri dari semua user"
					},
					"response": []
				},
				{
					"name": "Ban User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('Email should exist (tidak berlaku untuk uncheck variable key)', function () {\r",
									"    pm.expect(pm.request.body.urlencoded.has('email')).to.equal(true);\r",
									"});\r",
									"\r",
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"admin\"},\r",
									"        {key: \"password\", value: \"admin\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Banned User\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT Admin",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "gantiemail21@gmail.com",
									"description": "Email pengguna API ini yang ingin di ban",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								""
							]
						},
						"description": "Untuk memblokir user agar tidak bisa menggunakan web service"
					},
					"response": []
				},
				{
					"name": "History Transaksi API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat History Transaksi\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"admin\"},\r",
									"        {key: \"password\", value: \"admin\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT Admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/log?nama&tanggal",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"log"
							],
							"query": [
								{
									"key": "nama",
									"value": null,
									"description": "Nama pengguna API ini"
								},
								{
									"key": "tanggal",
									"value": null,
									"description": "Tanggal log aktivitas yang ingin dicari"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Lihat Opsi Deskripsi Produk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat Opsi Deskripsi Produk\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"admin\"},\r",
									"        {key: \"password\", value: \"admin\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT Admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/produk/deskripsi",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk",
								"deskripsi"
							]
						},
						"description": "Untuk melihat pemberitahuan dari user apa bila terdapat deskripsi produk yang menurut user salah atau kurang tepat"
					},
					"response": []
				},
				{
					"name": "Ubah Deskripsi Produk",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: \"admin\"},\r",
									"        {key: \"password\", value: \"admin\"}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"  pm.environment.set('x-auth-token', newAccessToken);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Ubah Deskripsi Produk\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "JWT Admin",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/produk/produkDeskripsi/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk",
								"produkDeskripsi",
								"1"
							]
						},
						"description": "Untuk mengubah deskripsi dari obat"
					},
					"response": []
				}
			],
			"description": "Ini adalah daftar endpoint yang berhubungan dengan Admin"
		},
		{
			"name": "Produk",
			"item": [
				{
					"name": "Lihat 1 Produsen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat Data Produsen\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.code == 200){\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"var count = Object.keys(responseJson[0]).length;\r",
									"\r",
									"    pm.test('Jumlah Response Benar', function () {\r",
									"        pm.expect(count).to.equal(13);\r",
									"    });\r",
									"}\r",
									"    \r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"\r",
									"  var a=newAccessToken;\r",
									"    let decodedData=jwt_decode(a);\r",
									"    console.log(decodedData.data.api_key);\r",
									"  pm.environment.set('x-auth-token', decodedData.data.api_key);\r",
									"});\r",
									"\r",
									"function jwt_decode(a) {\r",
									"    var parts = a.split('.'); // header, payload, signature\r",
									"    return JSON.parse(atob(parts[1]));\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "API key pengguna API yang sedang login",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{base_url}}/produk/produsen/PO_CV001",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk",
								"produsen",
								"PO_CV001"
							]
						},
						"description": "Unutk melihat data dari 1 produsen berdasarkan id produsen"
					},
					"response": []
				},
				{
					"name": "Lihat 1 Produk",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"\r",
									"  var a=newAccessToken;\r",
									"    let decodedData=jwt_decode(a);\r",
									"    console.log(decodedData.data.api_key);\r",
									"  pm.environment.set('x-auth-token', decodedData.data.api_key);\r",
									"});\r",
									"\r",
									"function jwt_decode(a) {\r",
									"    var parts = a.split('.'); // header, payload, signature\r",
									"    return JSON.parse(atob(parts[1]));\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat Data Produk\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.code == 200){\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"var count = Object.keys(responseJson[0]).length;\r",
									"\r",
									"    pm.test('Jumlah Response Benar', function () {\r",
									"        pm.expect(count).to.equal(10);\r",
									"    });\r",
									"}\r",
									"    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "API key pengguna API yang sedang login",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/produk/PR_FF001",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk",
								"PR_FF001"
							]
						},
						"description": "Untuk melihat data 1 produk berdasarkan id produk"
					},
					"response": []
				},
				{
					"name": "Lihat Produk",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat Data  Semua Produk\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"\r",
									"  var a=newAccessToken;\r",
									"    let decodedData=jwt_decode(a);\r",
									"    console.log(decodedData.data.api_key);\r",
									"  pm.environment.set('x-auth-token', decodedData.data.api_key);\r",
									"});\r",
									"\r",
									"function jwt_decode(a) {\r",
									"    var parts = a.split('.'); // header, payload, signature\r",
									"    return JSON.parse(atob(parts[1]));\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"type": "text",
								"description": "API key pengguna API yang sedang login"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{base_url}}/produk?nama=flu&limit=2",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk"
							],
							"query": [
								{
									"key": "nama",
									"value": "flu",
									"description": "Nama produk yang dicari"
								},
								{
									"key": "limit",
									"value": "2",
									"description": "Jumlah data produk yang ingin ditampilkan (berkaitan dengan tipe user)"
								}
							]
						},
						"description": "Untuk melihat data dari produk berdasarkan nama, atau keterangan, dan bisa diberi limit"
					},
					"response": []
				},
				{
					"name": "Lihat Kategori",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat Kategori\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"\r",
									"  var a=newAccessToken;\r",
									"    let decodedData=jwt_decode(a);\r",
									"    console.log(decodedData.data.api_key);\r",
									"  pm.environment.set('x-auth-token', decodedData.data.api_key);\r",
									"});\r",
									"\r",
									"function jwt_decode(a) {\r",
									"    var parts = a.split('.'); // header, payload, signature\r",
									"    return JSON.parse(atob(parts[1]));\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"description": "API key pengguna API yang sedang login",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/produk/kategori?nama&deskripsi&limit",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk",
								"kategori"
							],
							"query": [
								{
									"key": "nama",
									"value": null,
									"description": "Nama kategori yang ingin dicari"
								},
								{
									"key": "deskripsi",
									"value": null,
									"description": "Deskripsi kategori yang ingin dicari"
								},
								{
									"key": "limit",
									"value": null,
									"description": "Jumlah data kategori yang ingin ditampilkan (berkaitan dengan tipe user)"
								}
							]
						},
						"description": "Untuk melihat data kategori yang tersedia berdasarkan nama atau deskripsi, dan bisa diberi limit"
					},
					"response": []
				},
				{
					"name": "Lihat Produsen",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Berhasil Lihat Data Semua Produsen\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const tokenUrl = `${pm.environment.get(\"base_url\")}/users/login`;\r",
									"\r",
									"const getTokenRequest = {\r",
									"  method: 'POST',\r",
									"  url: tokenUrl,\r",
									"  body: {\r",
									"        mode: 'urlencoded',\r",
									"        urlencoded: [\r",
									"        {key: \"email\", value: `${pm.environment.get(\"email_user\")}`},\r",
									"        {key: \"password\", value: `${pm.environment.get(\"password_user\")}`}\r",
									"        ] \r",
									"    }\r",
									"};\r",
									"\r",
									"\r",
									"pm.sendRequest(getTokenRequest, (err, response) => {\r",
									"  const jsonResponse = response.json();\r",
									"  const newAccessToken = jsonResponse.token;\r",
									"\r",
									"  var a=newAccessToken;\r",
									"    let decodedData=jwt_decode(a);\r",
									"    console.log(decodedData.data.api_key);\r",
									"  pm.environment.set('x-auth-token', decodedData.data.api_key);\r",
									"});\r",
									"\r",
									"function jwt_decode(a) {\r",
									"    var parts = a.split('.'); // header, payload, signature\r",
									"    return JSON.parse(atob(parts[1]));\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{x-auth-token}}",
								"type": "text",
								"description": "API key pengguna API yang sedang login"
							}
						],
						"url": {
							"raw": "{{base_url}}/produk/produsen?kota=amb&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produk",
								"produsen"
							],
							"query": [
								{
									"key": "nama",
									"value": "nam",
									"disabled": true
								},
								{
									"key": "kota",
									"value": "amb",
									"description": "Nama kota produsen yang ingin dicari"
								},
								{
									"key": "limit",
									"value": "5",
									"description": "Jumlah data produsen yang ingin ditampilkan (berkaitan dengan tipe user)"
								}
							]
						},
						"description": "Untuk melihat data produsen dari obat yang tersedia berdasarkan nama atau kota, dan bisa diberi limit"
					},
					"response": []
				}
			],
			"description": "Ini adalah daftar API untuk melihat daftar produk yang tersedia"
		},
		{
			"name": "Email Validator",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-RapidAPI-Key",
						"value": "277e330438msh4a3341f50b31789p16c2c1jsna81479b4150e",
						"type": "text"
					},
					{
						"key": "X-RapidAPI-Host",
						"value": "mailcheck.p.rapidapi.com",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://mailcheck.p.rapidapi.com/?domain=yongkiwow@gmail.com",
					"protocol": "https",
					"host": [
						"mailcheck",
						"p",
						"rapidapi",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "domain",
							"value": "yongkiwow@gmail.com"
						}
					]
				},
				"description": "Endpoint untuk melakukan cek email user apakah sesuai/valid atau tidak"
			},
			"response": []
		}
	]
}